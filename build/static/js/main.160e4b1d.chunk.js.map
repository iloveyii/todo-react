{"version":3,"sources":["components/layout/Navbar.js","components/dashboard/Todo.js","components/dashboard/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","to","Todo","todo","updateTodo","deleteTodo","completed","text","task","onClick","TodoList","todos","updateTodos","taskRef","React","createRef","index","findIndex","item","id","addTodo","current","value","push","focus","map","i","dashboard_Todo","splice","key","type","ref","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","setState","layout_Navbar","dashboard_TodoList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.160e4b1d.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navbar = (props) => {\n\n    return(\n        <nav className=\"nav-wrapper grey darken-3\">\n            <div className=\"container\">\n                <a to='/' className=\"brand.logo\">TODO</a>\n            </div>\n        </nav>\n    )\n};\n\nexport default Navbar;\n","import React  from 'react';\n\nconst Todo = (props) => {\n    const {todo, updateTodo, deleteTodo} = props;\n\n    const className = todo.completed ? 'waves-effect pink darken-4 btn-small fixed-width' : 'waves-effect blue darken-1 btn-small fixed-width';\n    const text = todo.completed ? 'completed' : 'complete';\n    const completed = todo.completed ? 'completed' : '';\n\n    return (\n        <li className='todo'>\n            <span className={completed}>{todo.task}</span>\n            <button onClick={deleteTodo} className=\"waves-effect pink darken-4 btn-small\">X</button>\n            <button onClick={() => { todo.completed = ! todo.completed; updateTodo(todo);}} className={className}>{text}</button>\n        </li>\n    )\n};\n\nexport default Todo;\n","import React  from 'react';\nimport Todo from './Todo';\n\nfunction TodoList(props) {\n    const {todos, updateTodos} = props;\n    let taskRef = React.createRef();\n\n    const updateTodo = (todo) => {\n        const index = todos.findIndex(item => item.id === todo.id);\n        todos[index] = todo;\n        updateTodos(todos);\n    };\n\n    const addTodo = () => {\n        if(taskRef.current.value == '') return null;\n\n        const todo = {\n            task : taskRef.current.value,\n            completed : false\n        };\n        todos.push(todo);\n        updateTodos(todos);\n        taskRef.current.value = '';\n        taskRef.current.focus();\n    };\n\n    const deleteTodo = (index) => {\n        todos.splice(index, 1);\n        updateTodos(todos);\n    };\n\n    return (\n        <div className=\"section\">\n            <div className=\"card z-depth-0\">\n                <div className=\"card-content\">\n                    <span className=\"card-title\">Todos</span>\n                    <ul className=\"todos\">\n                        {\n                            todos && todos.map((todo, i) => <Todo updateTodo={updateTodo} deleteTodo={() => deleteTodo(i)} addTodo={addTodo}\n                                                                  key={i} todo={todo}/>)\n                        }\n\n                        <li className='todo'>\n                            <input type=\"text\" ref={taskRef} />\n                            <button onClick={addTodo} className=\"waves-effect pink darken-4 btn-small\">Add</button>\n                        </li>\n                    </ul>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default TodoList;\n","import React  from 'react';\nimport Navbar from './components/layout/Navbar';\nimport TodoList from './components/dashboard/TodoList';\n\nimport './App.css';\n\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            todos:\n                [\n                    {\n                        id: 1,\n                        task: 'Write React app using hooks',\n                        completed: true\n                    },\n                    {\n                        id: 2,\n                        task: 'Write backend in node express',\n                        completed: false\n                    },\n                    {\n                        id: 3,\n                        task: 'Write backend in node hapi',\n                        completed: true\n                    },\n                    {\n                        id: 4,\n                        task: 'Write backend in node GraphGL',\n                        completed: false\n                    }\n                ]\n        };\n\n        this.updateTodos = this.updateTodos.bind(this);\n    }\n\n    updateTodos(todos) {\n        this.setState({todos});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <Navbar/>\n\n                <div className=\"dashboard container\">\n                    <div className=\"row\">\n                        <div className=\"col s12 m10 offset-m1\">\n                            <TodoList updateTodos={this.updateTodos} todos={this.state.todos} />\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n\n}\n\n\nexport default App;\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}